<?php

namespace Boots\Mounter;

/**
 * This file is part of the Boots framework.
 *
 * @package    Boots
 * @subpackage Mounter\Mount
 * @author     Kamal Khan <shout@bhittani.com>
 * @version    2.x
 * @see        http://wpboots.com
 * @link       https://github.com/wpboots/boots
 * @copyright  2014-2016 Kamal Khan
 * @license    https://github.com/wpboots/boots/blob/master/LICENSE
 */

use PhpParser\Error;
use Composer\Script\Event;
use PhpParser\NodeTraverser;
use PhpParser\ParserFactory;
use PhpParser\PrettyPrinter\Standard;
use Bhittani\PhpParser\AppendSuffixVisitor;

/**
 * @package Boots
 * @subpackage Mounter\Mount
 */
class Mount
{
    protected static function sanitize($str)
    {
        $re = '/(?<!^)([A-Z][a-z]|(?<=[a-z])[^a-z]|(?<=[A-Z])[0-9_])/';
        return strtolower(preg_replace($re, '.$1', str_replace(' ', '', lcfirst(ucwords(
            str_replace(['-', '_'], ' ', $str)
        )))));
    }

    protected static function readManifest($path)
    {
        $manifest = ['version' => '', 'autoload' => []];
        if (is_file($path)) {
            $manifest = json_decode(file_get_contents($path), true);
        }
        return $manifest;
    }

    protected static function writeManifest($path, array $manifest)
    {
        file_put_contents($path, json_encode($contents));
    }

    protected static function readConfig($path)
    {
        $config = ['version' => '', 'extensions' => []];
        if (is_file($path)) {
            $config = require $path;
        }
        return $config;
    }

    protected static function writeConfig($path, array $config)
    {
        $contents = '<?php ' . PHP_EOL;
        $contents .= '// This file is automatically generated by the' . PHP_EOL;
        $contents .= '// boots framework and SHOULD NOT be modified directly.' . PHP_EOL;
        $contents .= 'return ' . var_export($config, true) . ';' . PHP_EOL;
        file_put_contents($path, $contents);
    }

    protected static function getSuffix($str)
    {
        $suffix = str_replace('.', '_', $str);
        return empty($suffix) ? '' : "_{$suffix}";
    }

    protected static function getPsr4Fqcns($dir, $prefix = '')
    {
        $prefix = rtrim($prefix, '\\');
        $files = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($dir));
        $files = new \RegexIterator($files, '/\.php$/');
        $fqcns = [];
        foreach ($files as $file) {
            $path = $file->getRealPath();
            $class = ltrim(rtrim(substr($path, strlen($dir)), '.php'), '/');
            $fqcns[] = $prefix . '\\' . str_replace('/', '\\', $class);
        }
        return $fqcns;
    }

    protected static function getPsr4Regexes($dir, $prefix = '', $suffix = '')
    {
        $prefix = rtrim($prefix, '\\');
        $files = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($dir));
        $files = new \RegexIterator($files, '/\.php$/');
        $regexes = [];
        foreach ($files as $file) {
            $path = $file->getRealPath();
            $class = ltrim(rtrim(substr($path, strlen($dir)), '.php'), '/');
            $fqcn = $prefix . '\\' . str_replace('/', '\\', $class);
            $regexes['/^\\\?' . preg_quote($fqcn) . '$/'] = $suffix;
        }
        return $regexes;
    }

    protected static function mount($dir, $suffix, array $regexes = [])
    {
        $parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
        $traverser = new NodeTraverser;
        $prettyPrinter = new Standard;
        $traverser->addVisitor(new AppendSuffixVisitor($suffix, $regexes));
        $files = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($dir));
        $files = new \RegexIterator($files, '/\.php$/');
        foreach ($files as $file) {
            $code = file_get_contents($file);
            $stmts = $parser->parse($code);
            $stmts = $traverser->traverse($stmts);
            $code = $prettyPrinter->prettyPrintFile($stmts);
            file_put_contents($file, $code);
        }
    }

    public static function mountBoots(Event $event)
    {
        $composer = $event->getComposer();
        $package = $composer->getPackage();
        $name = $package->getPrettyName();
        $version = $package->getPrettyVersion();
        $sanitizedVersion = static::sanitize($version);
        $baseDir = dirname($composer->getConfig()->getConfigSource()->getName());
        static::mount("{$baseDir}/src", static::getSuffix($sanitizedVersion));
        $configFile = "{$baseDir}/boots.php";
        $config = static::readConfig($configFile);
        $config['version'] = $sanitizedVersion;
        static::writeConfig($configFile, $config);
    }

    public static function mountExtensions(Event $event)
    {
        $composer = $event->getComposer();
        $baseDir = dirname($composer->getConfig()->getConfigSource()->getName());
        $configFile = "{$baseDir}/boots.php";
        $config = static::readConfig($configFile);
        $regexes = static::getPsr4Regexes(
            "{$baseDir}/src",
            'Boots',
            static::getSuffix($config['version'])
        );
        $extendDir = "{$baseDir}/extend";
        $manifestFile = 'boots.json';
        $files = new \IteratorIterator(new \DirectoryIterator($extendDir));
        $extensions = [];
        foreach ($files as $file) {
            $path = $file->getRealPath();
            $extension = $file->getBasename();
            $manifestPath = "{$path}/{$manifestFile}";
            if ($file->isDot() || !is_dir($path) || !is_file($manifestPath)) {
                continue;
            }
            $manifest = static::readManifest($manifestPath);
            if (!array_key_exists('class', $manifest)) {
                continue;
            }
            $class = $manifest['class'];
            $version = array_key_exists('version', $manifest) ? $manifest['version'] : '';
            $sanitizedVersion = static::sanitize($version);
            $sanitizedVersion .= empty($config['version']) ? '' : ".{$config['version']}";
            $autoload = array_key_exists('autoload', $manifest) ? $manifest['autoload'] : [];
            if (array_key_exists('mounted', $manifest)
                && !$manifest['mounted']
            ) {
                static::mount($path, static::getSuffix($sanitizedVersion));
                $manifest['mounted'] = true;
                static::writeManifest($manifestPath, $manifest);
            }
            $manifest['version'] = $sanitizedVersion;
            $manifest['autoload'] = $autoload;
            $manifest['mounted'] = false;
            $extensions[$extension] = $manifest;
        }
        $config['extensions'] = $extensions;
        static::writeConfig($configFile, $config);
    }
}
